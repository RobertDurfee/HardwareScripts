#!/usr/bin/python3


from typing import List, Tuple, Any, NamedTuple, Dict
import argparse
import sys
import os
import string
from pathlib import Path
from tempfile import mkdtemp
from argparse import Namespace
from subprocess import Popen, PIPE
import re
from common import SCRIPT_DIR, read_file


def get_args() -> Namespace:
    parser = argparse.ArgumentParser(
        description='Script for quick-and-dirty evaluating, simulating, ' +
                    'synthesizing, and power estimation of hardware.')

    parser.add_argument(
        '--verbose', '-v',
        default=False,
        action='store_true',
        help='Print additional information.')
    parser.add_argument(
        '--output', '-o',
        type=str,
        default=None,
        help='Output directory. (Default: None)')

    subparsers = parser.add_subparsers(
        dest='cmd',
        required=True)
    eval_parser = subparsers.add_parser(
        'eval',
        help='Evaluate an expression.')
    sim_parser = subparsers.add_parser(
        'sim',
        help='Simulate a module.')
    synth_parser = subparsers.add_parser(
        'synth',
        help='Synthesize a function or module.')
    power_parser = subparsers.add_parser(
        'power',
        help='Estimate (switching) power of a module.')

    eval_parser.add_argument(
        'files',
        type=str,
        nargs='+',
        help='Files to include.')
    eval_parser.add_argument(
        'expression',
        type=str,
        help='Expression to evaluate.')
    eval_parser.add_argument(
        '--format', '-f',
        type=str,
        default='%d',
        help='Display format specifier. (Default: %d)')

    sim_parser.add_argument(
        'file',
        type=str,
        help='File with module to simulate.')
    sim_parser.add_argument(
        '--reset', '-r',
        type=str,
        default='rst',
        help='Top-level reset signal. (Default: rst)')
    sim_parser.add_argument(
        '--clock', '-c',
        type=str,
        default='clk',
        help='Top-level clock signal. (Default: clk)')
    sim_parser.add_argument(
        '--stop', '-s',
        type=str,
        default='$finish',
        help='Stop condition for simulation. $finish, simulation time, or ' +
             'signal name. (Default: $finish)')
    sim_parser.add_argument(
        '--trace', '-t',
        type=str,
        default=None,
        help='Output VCD trace file. (Default: None)')

    synth_parser.add_argument(
        'file',
        type=str,
        help='File to include.')
    synth_parser.add_argument(
        'top',
        type=str,
        help='Name of top-level function or module to synthesize.')
    synth_parser.add_argument(
        '--library', '-l',
        type=str,
        default='multisize',
        help='Cell library. basic, extended, or multisize. ' +
             '(Default: multisize)')
    synth_parser.add_argument(
        '--delay', '-d',
        type=int,
        default=1,
        help='Target delay in ps. (Default: 1)')
    synth_parser.add_argument(
        '--clock', '-c',
        type=str,
        default='clk',
        help='Top-level clock signal. (Default: clk)')
    synth_parser.add_argument(
        '--opt', '-O',
        type=int,
        default=1,
        help='Optimization level. (Default: 1)')
    synth_parser.add_argument(
        '--yosys', '-y',
        type=str,
        default='yosys',
        help='Yosys binary. (Default: yosys)')

    power_parser.add_argument(
        'file',
        type=str,
        help='File with module to estimate power.')
    power_parser.add_argument(
        'top',
        type=str,
        help='Name of top-level function or module to estimate power.')
    power_parser.add_argument(
        'testbench',
        type=str,
        help='File with testbench for simulation.')
    power_parser.add_argument(
        '--glitch', '-g',
        default=False,
        action='store_true',
        help='Include glitch power. (Default: False)')
    power_parser.add_argument(
        '--reset', '-r',
        type=str,
        default='rst',
        help='Top-level reset signal. (Default: rst)')
    power_parser.add_argument(
        '--clock', '-c',
        type=str,
        default='clk',
        help='Top-level clock signal. (Default: clk)')
    power_parser.add_argument(
        '--stop', '-s',
        type=str,
        default='$finish',
        help='Stop condition for simulation. $finish, simulation time, or ' +
             'signal name. (Default: $finish)')
    power_parser.add_argument(
        '--library', '-l',
        type=str,
        default='multisize',
        help='Cell library. basic, extended, or multisize. ' +
             '(Default: multisize)')
    power_parser.add_argument(
        '--delay', '-d',
        type=int,
        default=1,
        help='Target delay in ps. (Default: 1)')
    power_parser.add_argument(
        '--opt', '-O',
        type=int,
        default=1,
        help='Optimization level. (Default: 1)')
    power_parser.add_argument(
        '--yosys', '-y',
        type=str,
        default='yosys',
        help='Yosys binary. (Default: yosys)')

    return parser.parse_args()


def write_file(file: str, data: str) -> None:
    try:
        f = open(file, "w")
        f.write(data)
        f.close()
    except BaseException:
        print(f"Could not write file {file}")
        sys.exit(1)


def run_start(cmd: str) -> Popen:
    return Popen(cmd, shell=True, stdout=PIPE, stderr=PIPE)


def run_finish(proc: Popen) -> str:
    (stdout, stderr) = proc.communicate()
    if proc.returncode == 0:
        return stdout.decode('utf-8')
    else:
        sys.stderr.write(stderr.decode('utf-8'))
        sys.stderr.flush()
        sys.exit(proc.returncode)


def run(cmd: str) -> str:
    proc = run_start(cmd)
    return run_finish(proc)


class Template(string.Template):
    delimiter = '#'


EVAL_TEMPLATE = Template(
    read_file(os.path.join(SCRIPT_DIR, 'eval_template.sv')))


def run_eval(files: List[str], expression: str, args: Namespace) -> None:
    if args.output is None:
        eval_dir = mkdtemp()
    else:
        eval_dir = os.path.abspath(args.output)
        os.makedirs(eval_dir, exist_ok=True)

    if args.verbose:
        print(f"Evaluate directory: {eval_dir}\n")

    eval_file = os.path.join(eval_dir, 'Eval.sv')
    includes = '\n'.join([
        f'`include "{os.path.abspath(file)}"' for file in files
    ])
    eval_data = EVAL_TEMPLATE.substitute(
        INCLUDES=includes,
        EXPRESSION=expression,
        FORMAT=args.format
    )
    write_file(eval_file, eval_data)

    run_sim(eval_file, Namespace(
        reset='rst',
        clock='clk',
        stop='$finish',
        trace=None,
        **vars(args)),
        func=True)


SIM_TEMPLATE = string.Template(
    read_file(os.path.join(SCRIPT_DIR, 'sim_template.cpp')))

SIM_TRACE_TEMPLATE = string.Template(
    read_file(os.path.join(SCRIPT_DIR, 'sim_trace_template.cpp')))

SIM_FUNC_TEMPLATE = string.Template(
    read_file(os.path.join(SCRIPT_DIR, 'sim_func_template.cpp')))

STOP_PATTERN = re.compile(
    r"(?P<finish>\$finish)|(?P<time>\d+)|(?P<signal>[a-zA-Z_]\w*)")

VERILATOR_TEMPLATE = string.Template(
    'verilator --cc --exe --build $SIM_FILE $FILE --Mdir $BUILD_DIR ' +
    '--relative-includes -CFLAGS -DVL_NO_LEGACY --top-module $MODULE')

FINISH_PATTERN = re.compile(r"- [^:]+:\d+: Verilog \$finish")


def run_sim(file: str, args: Namespace, func: bool = False) -> str:
    module = Path(file).stem

    if not func:
        print(f"Simulating module {module}\n")

    if args.output is None:
        sim_dir = mkdtemp()
    else:
        sim_dir = os.path.abspath(args.output)
        os.makedirs(sim_dir, exist_ok=True)

    if args.verbose:
        print(f"Simulation directory: {sim_dir}\n")

    match = STOP_PATTERN.match(args.stop)
    if match is None:
        print(f"Invalid stop condition `{args.stop}`")
        sys.exit(1)

    stop_type = match.lastgroup
    if stop_type == 'finish':
        stop = '!context->gotFinish()'
    elif stop_type == 'time':
        stop = f"context->time() < {match.group('time')}"
    elif stop_type == 'signal':
        stop = f"!top->{match.group('signal')}"
    else:
        assert False, 'unreachable'

    sim_file = os.path.join(sim_dir, 'sim.cpp')
    if func:
        sim_data = SIM_FUNC_TEMPLATE.substitute(
            MODULE=module
        )
    else:
        if args.trace is None:
            sim_data = SIM_TEMPLATE.substitute(
                MODULE=module,
                STOP=stop,
                RESET=args.reset,
                CLOCK=args.clock
            )
        else:
            sim_data = SIM_TRACE_TEMPLATE.substitute(
                MODULE=module,
                DEPTH=999,
                TRACE=args.trace,
                STOP=stop,
                RESET=args.reset,
                CLOCK=args.clock
            )
    write_file(sim_file, sim_data)

    build_dir = os.path.join(sim_dir, 'build')
    verilator_cmd = VERILATOR_TEMPLATE.substitute(
        SIM_FILE=sim_file,
        FILE=file,
        BUILD_DIR=build_dir,
        MODULE=module
    ) + (' --trace --trace-underscore' if args.trace is not None else '')
    run(verilator_cmd)

    bin_file = os.path.join(build_dir, f"V{module} +verilator+rand+reset+2")
    stdout = run(bin_file)
    for line in stdout.splitlines():
        if FINISH_PATTERN.match(line) is not None:
            continue
        print(line)

    print('\nSimulation complete')

    return stdout


SYNTH_TEMPLATE = Template(
    read_file(os.path.join(SCRIPT_DIR, 'synth_template.sv')))

FUNCTION_PATTERN = re.compile(
    r" function (?P<function_signature>.*?);")

FUNCTION_SIGNATURE_PATTERN = re.compile(
    r"\s*(?P<output_type>.*?)\s+(?P<function_name>\w+)\s*\((?P<inputs>.*?)\)")


def strip_comments(source: str) -> str:
    stripped_multi = re.sub(r"\/\*(.*?)\*\/", '', source,
                            flags=re.MULTILINE | re.DOTALL)
    stripped_single = re.sub(r"\/\/(.*?)\n", '\n', stripped_multi)
    return stripped_single


def parse_function(file: str, function_name: str) -> Tuple[str, str, str]:
    source = ' ' + strip_comments(read_file(file)).replace('\n', ' ')

    match = None
    for function in FUNCTION_PATTERN.finditer(source):
        function_signature = function.group('function_signature')

        match = FUNCTION_SIGNATURE_PATTERN.search(function_signature)
        if match is not None:
            if function_name == match.group('function_name'):
                break
            else:
                match = None

    if match is None:
        print(f"Unable to find function '{function_name}' in '{file}'")
        sys.exit(1)

    output_type = match.group('output_type')

    inputs = match.group('inputs')
    inputs = inputs.split(',')
    if inputs[-1] == '':
        inputs = inputs[:-1]

    args = ', '.join([i.split()[-1] for i in inputs])
    function_call = f"{function_name}({args})"

    return ',\n'.join(inputs), output_type, function_call


YOSYS_TEMPLATE = string.Template(
    read_file(os.path.join(SCRIPT_DIR, 'yosys_template.ys')))

ABC_TEMPLATE = string.Template(
    'strash;$OPT;ifraig;map -D $DELAY -B 0.1;cleanup;$BUF;' +
    'upsize -D $DELAY;dnsize -D $DELAY;stime -p -a;')

RESYN = 'balance;rewrite;rewrite -z;balance;rewrite -z;balance'
RESYN2 = 'balance;rewrite;refactor;balance;rewrite;rewrite -z;balance;' + \
         'refactor -z;rewrite -z;balance'

OPT = {
    0: [
        ('ox', 'balance -x'),
    ],
    1: [
        ('ox', 'balance -x'),
        ('ob', f"{RESYN};if -x;{RESYN2};if -x;balance -x;{RESYN2}"),
    ],
}

BUF = [
    ('nb', ''),
    ('b', 'buffer'),
    ('b50', 'buffer -N 50'),
]

ABC_WIRE_LOAD_PATTERN = re.compile(
    r"ABC: WireLoad = \"none\" (?P<summary>.*)")
DELAY_PATTERN = re.compile(
    r"Delay = (?P<delay>.*?) ps")
AREA_PATTERN = re.compile(
    r"Area = (?P<area>.*?) \(")
ABC_PATH_PATTERN = re.compile(
    r"ABC:\s?Path\s*\d+\s?--\s+\d+\s?:\s?\d+\s+(?P<fanout>\d+)\s+" +
    r"(?P<name>\S+).*?Df =(?P<delay>.*?)ps.*")
ABC_NODE_PATTERN = re.compile(
    r"ABC:\s*(?P<id>\d+)\s*:\s*(?P<fanin>\d+)\s*(?P<fanout>\d+)\s*" +
    r"(?P<type>\w+)\s*A\s*=\s*(?P<area>.*?)\s*Dr\s*=\s*(?P<delay_upper>.*?)" +
    r"\s+(?P<delay_diff>.*?)\s*ps\s*S\s*=\s*(?P<slew_upper>.*?)\s*ps\s*Cin" +
    r"\s*=\s*.*?\s*ff\s*Cout\s*=\s*(?P<load_upper>.*?)\s*ff\s*Cmax\s*=\s*" +
    r"(?P<load_max>.*?)\s*ff\s*G\s*=\s*.*")
ABC_POINT_PATTERN = re.compile(
    r"ABC: Start-point = .*? \((?P<crit_start>.*?)\)\.  " +
    r"End-point = .*? \((?P<crit_end>.*?)\)\.")
CELL_NAME_PATTERN = re.compile(
    r"\s*cell\s*\((?P<cell_name>.*?)\)\s*{")
CELL_AREA_PATTERN = re.compile(
    r"\s*area\s*:\s*(?P<cell_area>.*?);")
NUMBER_CELLS_PATTERN = re.compile(
    r"\s*Number of cells:\s*\d+")
CELLS_PATTERN = re.compile(
    r"\s*(?P<cell_name>.*?)\s+(?P<cell_count>.*)")

PathLine = NamedTuple('PathLine', [
    ('name', str),
    ('fanout', int),
    ('t_pd', float),
    ('cum_delay', float),
])

CellStats = NamedTuple('CellStats', [
    ('cell_name', str),
    ('cell_count', int),
    ('cell_area', float),
    ('type_area', float),
])

Node = NamedTuple('Node', [
    ('id', int),
    ('fanin', int),
    ('fanout', int),
    ('type', str),
    ('area', float),
    ('delay_upper', float),
    ('delay_diff', float),
    ('slew_upper', float),
    ('load_upper', float),
    ('load_max', float),
])

Synthesis = NamedTuple('Synthesis', [
    ('total_cells', int),
    ('total_gate_area', float),
    ('delay', float),
    ('crit_start', str),
    ('crit_end', str),
    ('path_lines', List[PathLine]),
    ('cell_stats', List[CellStats]),
    ('nodes', List[Node]),
])


def print_columns(header: List[Tuple[str, ...]],
                  rows: List[Tuple[Any, ...]]) -> None:
    lines = header[:2]
    fmt = header[2]

    for row in rows:
        lines.append(
            tuple(fmt[i].format(elem) for i, elem in enumerate(row)))

    widths = [0] * len(fmt)

    for line in lines:
        for i, elem in enumerate(line):
            widths[i] = max(widths[i], len(elem))

    for line in lines:
        print(' '.join([
            f"{elem: >{widths[i]}}" for i, elem in enumerate(line)
        ]))


def run_synth(file: str, top: str, args: Namespace) -> Synthesis:
    is_module = top[0].isupper()

    print(f"Synthesizing {'module' if is_module else 'function'} {top} with " +
          f"library = {args.library}, O{args.opt}, target delay = " +
          f"{args.delay} ps\n")

    if args.output is None:
        synth_dir = mkdtemp()
    else:
        synth_dir = os.path.abspath(args.output)
        os.makedirs(synth_dir, exist_ok=True)

    if args.verbose:
        print(f"Synthesis directory: {synth_dir}")

    if is_module:
        module = Path(file).stem
    else:
        module = 'Synth'
        synth_file = os.path.join(synth_dir, f"{module}.sv")
        includes = f'`include "{os.path.abspath(file)}"'
        inputs, output_type, function_call = parse_function(file, top)
        synth_data = SYNTH_TEMPLATE.substitute(
            INCLUDES=includes,
            INPUTS=inputs,
            OUTPUT_TYPE=output_type,
            FUNCTION_CALL=function_call
        )
        write_file(synth_file, synth_data)

        file = synth_file

    verilog_file = os.path.join(synth_dir, f"{module}.v")
    verilog_data = run(f"sv2v {file}")
    verilog_data = '\n'.join([
        line
        if '$finish' not in line and '$display' not in line
        else f"/*{line}*/;"
        for line in verilog_data.splitlines()
    ])
    write_file(verilog_file, verilog_data)

    library_file = os.path.join(SCRIPT_DIR, f"{args.library}.lib")
    size = 'single' if args.library in ['basic', 'extended'] else 'multi'
    constraints_file = os.path.join(SCRIPT_DIR, f"{size}size.constr")

    def start(out_dir: str, opt: str, buf: str) -> Popen:
        abc_file = os.path.join(out_dir, 'abc.script')
        abc_data = ABC_TEMPLATE.substitute(
            OPT=opt,
            DELAY=args.delay,
            BUF=buf
        )
        abc_data = '\n'.join([
            f"echo + {cmd}\n{cmd}" for cmd in abc_data.split(';')
        ])
        write_file(abc_file, abc_data)

        yosys_file = os.path.join(out_dir, 'yosys.ys')
        yosys_data = YOSYS_TEMPLATE.substitute(
            VERILOG_FILE=verilog_file,
            MODULE=module,
            LIBRARY_FILE=library_file,
            CONSTRAINTS_FILE=constraints_file,
            DELAY=args.delay,
            CLOCK=args.clock,
            OUT_DIR=out_dir
        )
        write_file(yosys_file, yosys_data)

        yosys_out = os.path.join(out_dir, 'yosys.out')
        return run_start(f"{args.yosys} {yosys_file} | tee {yosys_out}")

    def finish(out_dir: str, proc: Popen) -> Tuple[float, float]:
        yosys_out = run_finish(proc)

        summary = None
        for line in yosys_out.splitlines():
            match = ABC_WIRE_LOAD_PATTERN.match(line)
            if match is not None:
                summary = match.group('summary')
                break

        if summary is None:
            print('Yosys output does not contain timing and area analysis')
            sys.exit(1)

        match = DELAY_PATTERN.search(summary)
        if match is None:
            print('Yosys output does not contain timing analysis')
            sys.exit(1)
        delay = float(match.group('delay').strip())

        match = AREA_PATTERN.search(summary)
        if match is None:
            print('Yosys output does not contain area analysis')
            sys.exit(1)
        area = float(match.group('area').strip())

        return delay, area

    procs = []
    for opt_abbr, opt in OPT[args.opt]:
        for buf_abbr, buf in BUF:
            out_dir = os.path.join(synth_dir, f"{opt_abbr}_{buf_abbr}")
            os.makedirs(out_dir, exist_ok=True)

            proc = start(out_dir, opt, buf)
            procs.append((out_dir, proc))

    results = []
    for out_dir, proc in procs:
        delay, area = finish(out_dir, proc)
        results.append((delay, area, out_dir))

    results.sort()

    if results[0][0] == 0. and results[0][1] == 0.:
        print('Synthesized circuit has no logic.')
        sys.exit(0)

    if results[0][0] >= args.delay:
        delay, _, out_dir = results[0]
    else:
        results = sorted([
            (area, delay, out_dir)
            for delay, area, out_dir in results
            if delay <= args.delay
        ])
        _, delay, out_dir = results[0]

    os.symlink(out_dir, os.path.join(synth_dir, 'best'))

    if args.verbose:
        print(f"Best result directory: {out_dir}\n")

    library_cells_file = os.path.join(SCRIPT_DIR, f"{args.library}_cells.v")
    verilog_file = os.path.join(synth_dir, 'out.v')
    verilog_data = read_file(os.path.join(out_dir, 'out.v'))
    verilog_lines = verilog_data.splitlines()
    verilog_lines = \
        verilog_lines[:1] + \
        [f'`include "{library_cells_file}"'] + \
        verilog_lines[1:]
    verilog_data = '\n'.join(verilog_lines)
    write_file(verilog_file, verilog_data)

    yosys_out = read_file(os.path.join(out_dir, 'yosys.out'))

    cell_areas = {}
    cell_name = None
    with open(library_file, 'r') as f:
        for line in f:
            match = CELL_NAME_PATTERN.match(line)
            if match is not None:
                assert cell_name is None
                cell_name = match.group('cell_name')
                continue

            match = CELL_AREA_PATTERN.match(line)
            if match is not None:
                assert cell_name is not None
                cell_area = float(match.group('cell_area'))
                cell_areas[cell_name] = cell_area
                cell_name = None

    stats_region = False
    total_gate_area = 0.
    total_cells = 0
    cell_stats = []
    for line in yosys_out.splitlines():
        match = NUMBER_CELLS_PATTERN.match(line)
        if match is not None:
            stats_region = True
            continue

        if stats_region:
            match = CELLS_PATTERN.match(line)
            if match is None:
                break
            cell_name = match.group('cell_name')
            cell_count = int(match.group('cell_count'))
            cell_area = cell_areas.get(cell_name, 0.)
            type_area = cell_area * cell_count
            total_gate_area += type_area
            total_cells += cell_count
            cell_stats.append(CellStats(cell_name, cell_count, cell_area,
                                        type_area))

    # TODO(rbd): Calculate BRAM area.

    nodes = []
    cum_delay = 0.
    path_lines = []
    crit_start, crit_end = None, None
    for line in yosys_out.splitlines():
        match = ABC_NODE_PATTERN.match(line)
        if match is not None:
            id = int(match.group('id'))
            fanin = int(match.group('fanin'))
            fanout = int(match.group('fanout'))
            type = match.group('type')
            area = float(match.group('area'))
            # delay_rise = float(match.group('delay_rise'))
            # delay_fall = float(match.group('delay_fall'))
            delay_upper = float(match.group('delay_upper'))
            delay_diff = float(match.group('delay_diff'))
            # slew_rise = float(match.group('slew_rise'))
            # slew_fall = float(match.group('slew_fall'))
            slew_upper = float(match.group('slew_upper'))
            # load_rise = float(match.group('load_rise'))
            # load_fall = float(match.group('load_fall'))
            load_upper = float(match.group('load_upper'))
            load_max = float(match.group('load_max'))

            # nodes.append((id, fanin, fanout, name, area, delay_rise,
            #               delay_fall, slew_rise, slew_fall, load_rise,
            #               load_fall, load_max))
            nodes.append(Node(id, fanin, fanout, type, area, delay_upper,
                              delay_diff, slew_upper, load_upper, load_max))

            continue

        match = ABC_PATH_PATTERN.match(line)
        if match is not None:
            fanout = int(match.group('fanout'))
            name = match.group('name')
            new_cum_delay = float(match.group('delay').strip().split()[0])

            t_pd = new_cum_delay - cum_delay
            cum_delay = new_cum_delay

            path_lines.append(PathLine(name, fanout, t_pd, cum_delay))

            continue

        match = ABC_POINT_PATTERN.match(line)
        if match is not None:
            crit_start = match.group('crit_start').strip()
            crit_end = match.group('crit_end').strip()

            if len(path_lines) == 0:
                print('Missing path.')
                sys.exit(1)

            path_lines[0] = PathLine(*(('IN',) + path_lines[0][1:]))

            break

    if crit_start is None or crit_end is None:
        print('Missing start/end point.')
        sys.exit(1)

    path_lines.append(PathLine('OUT', 0, 0., cum_delay))

    print(f"Gates: {total_cells}")
    print(f"Area: {total_gate_area:.2f} um^2")
    print(f"Critical-path delay: {delay} ps")

    def print_path(path_lines) -> None:
        print_columns([
            ('              Gate/port', ' Fanout', '  Gate delay (ps)', ' Cumulative delay (ps)'),  # noqa
            ('              ---------', ' ------', '  ---------------', ' ---------------------'),  # noqa
            ('              {}',        ' {}',     '  {:.1f}',          ' {:.1f}'),  # noqa
        ], path_lines)

    def print_area(area) -> None:
        print_columns([
            ('              Gate type', '  Gates', ' Area/gate (um^2)', '      Area/type (um^2)'),  # noqa
            ('              ---------', '  -----', ' ----------------', '      ----------------'),  # noqa
            ('              {}',        '  {}',    ' {:.3f}',           '      {:.3f}'),  # noqa
        ], area + [
            ('Total', total_cells, float('nan'), total_gate_area)
        ])

    print(f"\nCritical path: {crit_start} -> {crit_end}\n")
    print_path(path_lines)

    print('\nArea breakdown:\n')
    print_area(cell_stats)

    print('\nSynthesis complete')

    return Synthesis(total_cells, total_gate_area, delay, crit_start, crit_end,
                     path_lines, cell_stats, nodes)


VERILOG_MODULE_NAME_PATTERN = re.compile(
    r"\s*(?P<type>\w+)\s*(?P<name>.*?\$(?P<id>\d+))\s*\(")

VCD_MODULE_NAME_PATTERN = re.compile(
    r"\s*\$scope module (?P<name>.*?) \$end")

VCD_MODULE_OUTPUT_WIRE_PATTERN = re.compile(
    r"\s*\$var wire\s+\d+ (?P<wire>.*?) Z.*? \$end")

VCD_CYCLE_PATTERN = re.compile(
    r"#(?P<cycle>\d+)")

VCD_SWITCH_PATTERN = re.compile(
    r"(?P<value>[01])(?P<wire>.*)")

LIB_VDD_PATTERN = re.compile(
    r"\s*voltage_map\s*\(VDD,(?P<v_dd>.*?)\);")

START_CYCLE = 6


def run_power(file: str, top: str, testbench: str, args: Namespace) -> None:
    assert not args.glitch

    if args.output is None:
        power_dir = mkdtemp()
    else:
        power_dir = os.path.abspath(args.output)
        os.makedirs(power_dir, exist_ok=True)

    if args.verbose:
        print(f"Power directory: {power_dir}\n")

    synth_dir = os.path.join(power_dir, 'synth_dir')
    synth_args = args
    args.output = synth_dir
    synthesis = run_synth(file, top, synth_args)
    print()

    # NOTE(rbd): This is preeetty hacky...
    #
    # yosys and abc do not share gate IDs so there is no way to link abc's
    # calculated effective loads with yosys's generated Verilog without redoing
    # the calculation manually (which I don't want).
    #
    # However, it does appear that abc writes the BLIF in the same order as the
    # reported effective loads. Furthermore, if yosys is provided the -norename
    # option for the write_verilog command, the Verilog gate names include
    # monotonically increasing IDs in the order in which they were read from
    # the BLIF output by abc.
    #
    # So, if both are sorted by their IDs, then they *should* line up. Good
    # enough.
    #
    # (There is a tiny bit of sanity checking to at least confirm the gate
    # types line up, but beyond that would require more recomputation that I'm
    # trying to avoid.)

    gate_loads = list(map(lambda n: (n.type, n.load_upper),
                          sorted(synthesis.nodes, key=lambda n: n.id)))

    verilog_file = os.path.join(synth_dir, 'out.v')
    verilog_data = read_file(verilog_file)

    module_instances = []  # [(id, type, name)]
    for line in verilog_data.splitlines():
        match = VERILOG_MODULE_NAME_PATTERN.match(line)
        if match is not None:
            id = int(match.group('id'))
            type = match.group('type')
            name = match.group('name')

            module_instances.append((id, type, name))

    module_names = list(map(lambda mi: mi[1:],
                            sorted(module_instances, key=lambda mi: mi[0])))

    assert len(gate_loads) == len(module_names)

    module_info = {}
    for gate_load, module_name in zip(gate_loads, module_names):
        assert gate_load[0] == module_name[0]

        module = module_name[1][1:] \
            if module_name[1].startswith('\\') \
            else module_name[1]

        module_info[module] = Namespace(
            name=module,
            type=module_name[0],
            load=gate_load[1],
            switches=0,
            # energy=0.,
            avg_power=0.
        )

    sim_dir = os.path.join(power_dir, 'sim_dir')
    sim_args = args
    args.output = sim_dir
    trace_file = os.path.join(power_dir, 'out.vcd')
    args.trace = trace_file
    run_sim(testbench, sim_args)
    print()

    trace_data = read_file(trace_file)

    module = None
    wire2module: Dict[str, str] = {}
    cycle = -1
    for line in trace_data.splitlines():
        match = VCD_MODULE_NAME_PATTERN.match(line)
        if match is not None:
            assert module is None

            name = match.group('name')

            if name in module_info:
                module = name

            continue

        match = VCD_MODULE_OUTPUT_WIRE_PATTERN.match(line)
        if match is not None and module is not None:
            wire = match.group('wire')

            assert wire not in wire2module

            wire2module[wire] = module
            module = None

            continue

        match = VCD_CYCLE_PATTERN.match(line)
        if match is not None:
            cycle = int(match.group('cycle'))
            continue

        match = VCD_SWITCH_PATTERN.match(line)
        if match is not None and cycle >= START_CYCLE:
            value = int(match.group('value'))
            wire = match.group('wire')

            if value == 1 and wire in wire2module:
                module_info[wire2module[wire]].switches += 1

            continue

    cycles = cycle - START_CYCLE + 1
    t_clk = synthesis.delay

    library_file = os.path.join(SCRIPT_DIR, f"{args.library}.lib")
    library_data = read_file(library_file)

    v_dd = None
    for line in library_data.splitlines():
        match = LIB_VDD_PATTERN.match(line)
        if match is not None:
            v_dd = float(match.group('v_dd'))
            break

    assert v_dd is not None

    tot_energy = 0.
    avg_tot_power = 0.
    for module in module_info:
        load = module_info[module].load
        switches = module_info[module].switches

        energy = load * switches * (v_dd ** 2)
        avg_power = (energy / (cycles * t_clk)) * (10 ** 3)

        module_info[module].avg_power = avg_power

        tot_energy += energy
        avg_tot_power += avg_power

    print(f"Simulated cycles: {cycles}")
    print(f"Supply voltage: {v_dd} V")
    print(f"Average power: {avg_tot_power:.2f} uW")


if __name__ == '__main__':
    args = get_args()

    if args.cmd == 'eval':
        run_eval(args.files, args.expression, args)
    elif args.cmd == 'sim':
        run_sim(args.file, args)
    elif args.cmd == 'synth':
        run_synth(args.file, args.top, args)
    elif args.cmd == 'power':
        run_power(args.file, args.top, args.testbench, args)
    else:
        assert False, 'unreachable'
